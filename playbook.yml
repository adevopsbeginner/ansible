---
- name: Ansible for AWS, playbook
  hosts: localhost
  connection: local

  vars:
    this_name: a_abeginner
    aws_region: ap-southeast-2
    ami_name_prefix: al2023-ami-2023
    instance_type: t3.micro
    volume_size: 32
    keypair_name: "{{ this_name }}_ed25519"
    sg_whitelist: 
     - "203.123.64.0/20"
     - "10.10.10.0/24"
     #"{{ awsvpc_subnet_cidr_blocks }}"

  vars_files:
    - vault.yml

  environment:
    AWS_REGION: "{{ aws_region }}"
    AWS_ACCESS_KEY: '{{ vault_aws_access_key }}'
    AWS_SECRET_KEY: '{{ vault_aws_secret_key }}'

  roles:
    - awsvpc

  tasks:
    - name: New AWS keypair with existing key
      amazon.aws.ec2_key:
        name: "{{ keypair_name }}"
        key_material: "{{ lookup('file', 'files/ssh/abeginner.pub') }}"

    - name: New a security group
      amazon.aws.ec2_security_group:
        name: "{{ this_name }}"
        state: present
        description: ssh/https
        vpc_id: "{{ newvpc.vpc.id }}"
        rules:
          - proto: tcp
            ports:
              - 22
              - 443
            cidr_ip: "{{ sg_whitelist }}"
            rule_desc: ssh/https
        tags:
          Name: "{{ this_name }}"
          owner: "{{ owner }}"
          repo: "{{ repo }}"
      register: ec2sg

    - name: Get AMI id
      amazon.aws.ec2_ami_info:
        filters:
          name: "{{ ami_name_prefix }}*"
          architecture: "x86_64"
      register: ec2ami
    
    - name: Get lastest AMI
      ansible.builtin.set_fact:
        sorted_ami_list: "{{ ec2ami.images | sort(attribute='creation_date', reverse=true) }}"

    - name: New EC2 instance - {{ this_name }}
      amazon.aws.ec2_instance:
        name: "{{ this_name }}"
        vpc_subnet_id: "{{ public_subnets.results[0].subnet.id }}"
        image_id: "{{ sorted_ami_list[0].image_id }}"
        key_name: "{{ keypair_name }}"
        security_group: "{{ ec2sg.group_id }}"
        instance_type: "{{ instance_type }}"
        wait: true
        wait_timeout: 60
        volumes:
          - device_name: /dev/xvda
            ebs:
              volume_size: "{{ volume_size }}"
              delete_on_termination: false
        termination_protection: false
        network:
          assign_public_ip: true
        tags:
          Name: "{{ this_name }}"
          owner: "{{ owner }}"
          repo: "{{ repo }}"
